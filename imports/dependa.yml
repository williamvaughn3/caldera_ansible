---

- name: "Update Cache"
  become: true
  apt:
    update_cache: yes
    cache_valid_time: 3600
  register: status
  retries: 100
  until: status is success or ('Failed to lock apt for exclusive operation' not in status.msg and '/var/lib/dpkg/lock' not in status.msg)

- name: "Upgrade all packages to the latest version"
  become: true
  apt:
    name: "*"
    state: latest
    force_apt_get: false
  register: status
  retries: 100
  until: status is success or ('Failed to lock apt for exclusive operation' not in status.msg and '/var/lib/dpkg/lock' not in status.msg)

- name: "Install Common Apps"
  become: true
  apt:
    name: "{{ item }}"
    state: present    
    update_cache: yes
  loop: 
    - ntp
    - mlocate
    - vim
    - aptitude
    - openssh-server
    - openssl 
    - python3
    - python3-pip
    - mingw-w64
  register: status
  retries: 100
  until: status is success or ('Failed to lock apt for exclusive operation' not in status.msg and '/var/lib/dpkg/lock' not in status.msg)
  ignore_errors: true

- name: Status of Commons
  debug:
    var: status

- name: "Autoremove unused dependency packages"
  become: true
  apt:
    autoremove: yes
    update_cache: yes
  register: status
  retries: 100
  until: status is success or ('Failed to lock apt for exclusive operation' not in status.msg and '/var/lib/dpkg/lock' not in status.msg)
  ignore_errors: true

- name: Status of Remove and update
  debug:
    var: status

- name: check if symlink at /usr/bin/go exists
  stat:
    path: /usr/bin/go
  register: go_exists

- name: Remove symlink if exists
  become: true
  file:
    path: /usr/bin/go
    state: absent
  when: "go_exists == True"

- name: check if /usr/local/go exists
  stat:
    path: /usr/local/go/
  register: go2_exists

- name: Remove symlink if exists
  become: true
  file:
    path: /usr/local/go
    state: absent
  when: "go2_exists == True"

- name: Check if Go Path already exists
  become: true
  stat:
    path: "/etc/profile.d/gopath.sh"
  register: exist_check1

- name: Remove Path if Exists
  become: true
  file: 
    path: "/etc/profile.d/gopath.sh"
    state: absent
  when: exist_check1.stat.exists

- name: Check if Go Path already exists
  become: true
  stat:
    path: "/etc/profile.d/gopath2.sh"
  register: exist_check2

- name: Remove Path if Exists
  become: true
  file: 
    path: "/etc/profile.d/gopath2.sh"
    state: absent
  when: exist_check2.stat.exists

- name: Unarchive a file that needs to be downloaded (added in 2.0)
  become: true
  unarchive:
    src: https://go.dev/dl/go1.17.6.linux-amd64.tar.gz
    dest: /usr/local/go
    remote_src: yes
    mode: 0755

- name: Add Go to path.
  become: true
  copy:
    dest: /etc/profile.d/gopath.sh
    content: "PATH=$PATH:{{ go_path }}"
    mode: 0755

- name: Add go home to path.
  become: true
  copy:
    dest: /etc/profile.d/gopath2.sh
    content: "{{ go_home_path }}"
    mode: 0755

- name: symlink to go
  become: true
  file:
    src: /usr/local/go/bin/go
    dest: /usr/bin/go
    state: link
    mode: 0755

- name: add {{go_path}} to path
  become: true
  lineinfile:
    dest: /etc/environment
    state: present
    backrefs: yes
    regexp: 'PATH=(["])((?!.?{{go_path}}).?)(["])$'
    line: "PATH={{go_path}}/:$PATH"

...
